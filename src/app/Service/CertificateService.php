<?php

namespace App\Service;

use App\Http\Requests\Admin\SecurityRequest;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use Spatie\SslCertificate\SslCertificate;

class CertificateService
{
    protected $success = true;
    protected $message = null;

    protected $storage, $certFile, $keyFile, $intermediateFile, $certData;

    public function __construct($fromFile = true)
    {
        $this->storage = Storage::disk('security');

        if ($fromFile) {
            $this->loadCertificate();
            $this->registerCert();
        }
    }

    /**
     * Return if the process was successful or not
     */
    public function wasSuccessful(): bool
    {
        return $this->success;
    }

    /**
     * Get any error message generated by the process
     */
    public function getMessage(): string|null
    {
        return $this->message;
    }

    /**
     * Return the certificate in text format
     */
    public function getCertText(): string|bool
    {
        if (!$this->certData) {
            return false;
        }

        return $this->certFile;
    }

    public function getCertData(): array|bool
    {
        if (!$this->certData) {
            return false;
        }

        return [
            'is_valid' => $this->certData->isValid(),
            'issuer' => $this->certData->getIssuer(),
            'issued_to' => $this->certData->getDomain(),
            'expires' => $this->certData->expirationDate()->toFormattedDateString(),
            'signature' => $this->certData->getSignatureAlgorithm(),
            'organization' => $this->certData->getOrganization(),
        ];
    }

    /**
     * Load the certificate from local filesystem
     */
    protected function loadCertificate(): void
    {
        if (!$this->verifyCertExist() || !$this->verifyKeyExists()) {
            return;
        }

        $this->certFile = $this->storage->get('server.crt');
        $this->keyFile = $this->storage->get('private/server.key');
    }

    /**
     * Validate and create a new certificate
     */
    public function processNewCertificate(SecurityRequest $request)
    {
        $this->intermediateFile = $request->intermediate;
        $this->certFile = $request->certificate;
        $this->keyFile = $request->wildcard ?
            $request->key : $this->storage->get('private/server.key');

        $this->registerCert();

        if ($this->certData->isValid() && $this->validateKey()) {
            $this->saveCertificateFiles();

            return;
        }

        if (!$this->certData->isValid()) {
            $this->success = false;
            $this->message = 'The uploaded certificate is not a valid certificate';
        }
    }

    /**
     * Create the Certificate object so it can be parsed and data extracted
     */
    protected function registerCert(): void
    {
        if (!$this->validateCert()) {
            return;
        }

        $this->certData = SslCertificate::createFromString($this->certFile);
    }

    /**
     * Verify the the certificate file exist
     */
    protected function verifyCertExist(): bool
    {
        if ($this->storage->missing('server.crt')) {
            $this->success = false;
            $this->message = 'Certificate File missing from filesystem';

            Log::error('No SSL Certificate file found.');
            return false;
        }

        return true;
    }

    /**
     * Verify the the private key file exist
     */
    public function verifyKeyExists(): bool
    {
        if ($this->storage->missing('private/server.key')) {
            $this->success = false;
            $this->message = 'Key File missing from filesystem';

            Log::error('No SSL Key file found');
            return false;
        }

        return true;
    }

    /**
     * Validate the certificate is a proper certificate
     */
    protected function validateCert(): bool
    {
        return openssl_pkey_get_public($this->certFile) ? true : false;
    }

    protected function validateKey()
    {
        $certPubKeyResource = openssl_pkey_get_public($this->certFile);
        $publicKey1 = trim(openssl_pkey_get_details($certPubKeyResource)['key']);

        $private_key = openssl_pkey_get_private($this->keyFile);
        $publicKey2 = trim(openssl_pkey_get_details($private_key)['key']);

        $isValid = !strcmp($publicKey1, $publicKey2);

        if (!$isValid) {
            $this->success = false;
            $this->message = 'Certificate and Private Key do not match';

            Log::error('SSL Certificate and Private Key do not match');

            return false;
        }

        return true;
    }

    /**
     * Save the new certificate data to the file system
     */
    protected function saveCertificateFiles()
    {
        $this->storage->put('server.crt', $this->certFile);
        $this->storage->put('intermediate.crt', $this->intermediateFile);
        $this->storage->put('private/server.key', $this->keyFile);
    }
}