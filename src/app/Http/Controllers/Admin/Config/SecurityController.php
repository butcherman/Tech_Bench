<?php

namespace App\Http\Controllers\Admin\Config;

use App\Http\Controllers\Controller;
use App\Http\Requests\Admin\CsrRequest;
use App\Http\Requests\Admin\SecurityRequest;
use App\Models\AppSettings;
use App\Service\CertificateService;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use Inertia\Inertia;

class SecurityController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        $this->authorize('viewAny', AppSettings::class);
        $certObj = new CertificateService;

        return Inertia::render('Admin/Security/Index', [
            'cert' => $certObj->getCertText(),
            'data' => $certObj->getCertData(),
        ]);
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        $this->authorize('viewAny', AppSettings::class);
        $certObj = new CertificateService;

        return Inertia::render('Admin/Security/Create', [
            'has-key' => $certObj->verifyKeyExists(),
        ]);
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(SecurityRequest $request)
    {
        $certObj = new CertificateService(false);
        $certObj->processNewCertificate($request);

        if (! $certObj->wasSuccessful()) {
            Log::critical('Uploading new Certificate Failed', [
                'message' => $certObj->getMessage(),
            ]);

            // TODO - Verify this shows properly
            return back()->withErrors(['cert_error' => $certObj->getMessage()]);
        }

        Log::info('New Certificate uploaded by '.$request->user()->username);

        return redirect(route('admin.security.index'))
            ->with('success', __('admin.security.updated'));
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit()
    {
        $this->authorize('viewAny', AppSettings::class);

        return Inertia::render('Admin/Security/Edit');
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(CsrRequest $request, string $id)
    {
        $certObj = new CertificateService(false);

        Log::info('New CSR Request generated by '.$request->user()->username);

        return Inertia::render('Admin/Security/Edit', [
            'csr-request' => $certObj->generateCsr($request),
        ]);
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(Request $request)
    {
        $this->authorize('update', AppSettings::class);

        $certObj = new CertificateService;
        $certObj->destroyCertificate();

        Log::alert('SSL Certificate deleted by '.$request->user()->username);

        return back()->with('warning', __('admin.security.deleted'));
    }
}
